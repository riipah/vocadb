@using Resources
@using VocaDb.Model.Domain
@using VocaDb.Web.Code
@using VocaDb.Web.Helpers
@using VocaDb.Web.Models.Shared.Partials.Knockout
@using VocaDb.Web.Resources.Domain
@using Res = ViewRes.Search.IndexStrings
@using SharedRes = ViewRes.SharedStrings
@model VocaDb.Web.Models.Search.SearchIndexViewModel

@section Head {
	<link rel="stylesheet" href="@Url.Content("~/Content/Styles/songlist.css")" type="text/css" />
}

@{
	void SearchCategory(EntryType entryType, string title) {
		<li data-bind="css: { active: searchType() == '@entryType.ToString()' }">
			<a href="#" data-bind="click: function() { searchType('@entryType.ToString()'); }">@title</a>
		</li>
	}
}

<ul class="nav nav-pills">
	<li data-bind="css: { active: searchType() == 'Anything' }">
		<a href="#" data-bind="click: function() { searchType('Anything'); }">@EntryTypeNames.Undefined</a>
	</li>
	<li data-bind="css: { active: searchType() == 'Artist' }">
		<a href="#" data-bind="click: function() { searchType('Artist'); }">@ViewRes.SharedStrings.Artists</a>
	</li>
	<li data-bind="css: { active: searchType() == 'Album' }">
		<a href="#" data-bind="click: function() { searchType('Album'); }">@ViewRes.SharedStrings.Albums</a>
	</li>
	<li data-bind="css: { active: searchType() == 'Song' }">
		<a href="#" data-bind="click: function() { searchType('Song'); }">@ViewRes.SharedStrings.Songs</a>
	</li>
	@{ SearchCategory(EntryType.ReleaseEvent, ViewRes.SharedStrings.ReleaseEvents); }
	@{ SearchCategory(EntryType.Tag, ViewRes.SharedStrings.Tags); }
</ul>

<div id="anythingSearchTab" class="form-horizontal well well-transparent">

	<div class="pull-right">
		@{ await SearchDropDown("showArtistSearch", "artistSearchViewModel", Translate.ArtistSortRuleNames.ValuesAndNamesStrings); }
		@{ await SearchDropDown("showAlbumSearch", "albumSearchViewModel", Translate.AlbumSortRuleNames.ValuesAndNamesStrings); }
		@{ await SearchDropDown("showSongSearch", "songSearchViewModel", Translate.SongSortRuleNames.ValuesAndNamesStrings); }
		@{ await SearchDropDown("showEventSearch", "eventSearchViewModel", Translate.EventSortRuleNames.ValuesAndNamesStrings); }

		<div class="inline-block" data-bind="visible: showAlbumSearch(), with: albumSearchViewModel">
			<div class="btn-group">
				<a data-bind="css: { active: viewMode() == 'Details' }, click: function() { viewMode('Details'); }" class="btn btn-nomargin" href="#" title="@Res.AlbumDetails">
					<i class="icon-list"></i>
				</a>
				<a data-bind="css: { active: viewMode() == 'Tiles' }, click: function() { viewMode('Tiles'); }" class="btn btn-nomargin" href="#" title="@Res.AlbumTiles">
					<i class="icon-th"></i>
				</a>
			</div>
		</div>

		<div class="inline-block" data-bind="visible: showSongSearch(), with: songSearchViewModel">
			<div class="btn-group">
				<a data-bind="css: { active: viewMode() == 'Details' }, click: function() { viewMode('Details'); }" class="btn btn-nomargin" href="#" title="@Res.AlbumDetails">
					<i class="icon-th-list"></i>
				</a>
				<a data-bind="css: { active: viewMode() == 'PlayList' }, click: function() { viewMode('PlayList'); }" class="btn btn-nomargin" href="#" title="@Res.Playlist">
					<i class="icon-list"></i>
				</a>
			</div>
		</div>

		<div class="inline-block" data-bind="visible: showTagFilter()">
			<a data-bind="css: { active: showTags() }, click: function() { showTags(!showTags()); }" class="btn btn-nomargin" href="#" title="@Res.ShowTags">
				<i class="icon-tags"></i>
			</a>
		</div>

	</div>

	<div class="control-label">
		<i class="icon-search"></i>
	</div>
	<div class="control-group">
		<div class="controls">
			<div class="input-append">
				<input type="text" data-bind="textInput: searchTerm" class="input-xlarge" placeholder="@Res.TypeSomething" />
				<button class="btn btn-danger" data-bind="click: function() { searchTerm(''); }, visible: searchTerm">@SharedRes.Clear</button>
				&nbsp;
			</div>
			<button class="btn" data-bind="click: function() { showAdvancedFilters(!showAdvancedFilters()); }, css: { active: showAdvancedFilters }">
				@Res.MoreFilters
				<span class="caret"></span>
			</button>
		</div>
	</div>

	<div data-bind="visible: showAdvancedFilters" style="display: none;">
		<!-- Tag filtering with top genres -->
		<div class="control-group" data-bind="visible: showTagFilter">
			<div class="control-label">@ViewRes.SharedStrings.Tag</div>
			<div class="controls" data-bind="with: tagFilters">
				<partial name="Partials/Knockout/_TagFilters" model="@(new TagFiltersViewModel(true))" />
			</div>
		</div>

		<partial name="Partials/_ArtistSearchOptions" />

		<partial name="Partials/_AlbumSearchOptions" />

		<partial name="Partials/_SongSearchOptions" />
		
		<partial name="Partials/_EventSearchOptions" />

		<!-- Tag search options -->
		<div class="control-group" data-bind="visible: showTagSearch, with: tagSearchViewModel">
			<div class="control-label">@Res.TagCategory</div>
			<div class="controls">
				<div class="input-append">
					<partial name="Partials/Knockout/_LockingAutoComplete" model="@(new LockingAutoCompleteViewModel("tagCategoryAutoComplete", "categoryName", extraBindings: "clearValue: true"))" />
				</div>
			</div>
		</div>
		
		<!-- Checkboxes -->
		<div class="control-group">
			<div class="controls">
				
				<div data-bind="visible: showArtistSearch, with: artistSearchViewModel">
					<label class="checkbox" data-bind="visible: vocaDbContext.loggedUserId">
						<input type="checkbox" data-bind="checked: onlyFollowedByMe" />
						@Res.OnlyMyFollowedArtists
					</label>
				</div>

				<div data-bind="visible: showSongSearch, with: songSearchViewModel">
					<label class="checkbox">
						<input type="checkbox" data-bind="checked: pvsOnly" />
						@Res.OnlyWithPVs
					</label>

					<label class="checkbox" data-bind="visible: vocaDbContext.loggedUserId">
						<input type="checkbox" data-bind="checked: onlyRatedSongs" />
						@Res.InMyCollection
					</label>
				</div>
				
				<div data-bind="visible: showEventSearch, with: eventSearchViewModel">
					<label class="checkbox" data-bind="visible: vocaDbContext.loggedUserId">
						<input type="checkbox" data-bind="checked: onlyMyEvents" />
						@Res.OnlyMyEvents
					</label>
				</div>

				<label class="checkbox" data-bind="visible: showDraftsFilter">
					<input type="checkbox" data-bind="checked: draftsOnly" />
					@ViewRes.EntryIndexStrings.OnlyDrafts
				</label>

			</div>
		</div>

	</div>

</div>

<partial name="Partials/_AnythingSearchList" />

<partial name="Partials/_ArtistSearchList" />

<div data-bind="visible: showAlbumSearch, with: albumSearchViewModel">
	<partial name="Partials/_AlbumSearchList" />
</div>

<div data-bind="visible: showSongSearch, with: songSearchViewModel">
	<partial name="Partials/_SongSearchList" />
</div>

<div data-bind="visible: showEventSearch, with: eventSearchViewModel">
	<partial name="Partials/_EventSearchList" />
</div>

<partial name="Partials/_TagSearchList" />


<!-- Scripts -->
@section BodyScripts {
	<script src="@Url.Content("~/Scripts/soundcloud-api.js")" type="text/javascript"></script>
	<script type="text/javascript" src="https://www.youtube.com/iframe_api"></script>

	<script type="text/javascript">
		var model = {
			artistId: @ToJS(Model.ArtistId),
			artistType: '@Model.ArtistType',
			autoplay: @ToJS(Model.Autoplay),
			childTags: @ToJS(Model.ChildTags),
			childVoicebanks: @ToJS(Model.ChildVoicebanks),
			discType: '@Model.DiscType',
			eventCategory: '@Model.EventCategory',
			eventId: @ToJS(Model.EventId),
			filter: @ToJS(Model.Filter),
			minScore: @ToJS(Model.MinScore),
			onlyRatedSongs: @ToJS(Model.OnlyRatedSongs),
			onlyWithPVs: @ToJS(Model.OnlyWithPVs),
			pageSize: @ToJS(Model.PageSize),
			searchTypeName: '@Model.SearchTypeName',
			shuffle: @ToJS(Model.Shuffle),
			since: @ToJS(Model.Since),
			songType: '@Model.SongType',
			sort: '@Model.Sort',
			tagId: @ToJS(Model.TagId),
			viewMode: '@Model.ViewMode',
		};
		app.SearchIndex(model);
	</script>

}

@{
	async Task SearchDropDown(string visibleBinding, string viewModel, Dictionary<string, string> sortRules) {
		<partial name="Partials/Knockout/_SearchDropDown" model="@(new VocaDb.Web.Models.Shared.Partials.Knockout.SearchDropDownViewModel(visibleBinding, viewModel, sortRules))" />
	}
}